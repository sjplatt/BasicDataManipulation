<div class="center jumbotron">
  <h1>Stock analysis for <%=@keyword%></h1>
</div>
  
<svg id="graph"></svg>
<br>
<svg id="pct-chg-graph"></svg>

<style>
.domain {
  fill: none;
  stroke: black;
  stroke-width: 1;
}

.axis path,
.axis line {
  fill: none;
  stroke: black;
  shape-rendering: crispEdges;
  opacity: 1;
}

.d3-tip {
  background: rgba(1,1,1,.4);
  padding: 10px;
}

path {
  opacity: 0.35;
}
path:hover {
  opacity: 0.85;
}
</style>

<script>
makeGraph();

function makeGraph() {
  var margin = {top: 50, right: 50, bottom: 80, left: 50};
  var abswidth = 1300,
      absheight = 600,
      width = abswidth - margin.left - margin.right,
      height = absheight - margin.top - margin.bottom;
  // var timeInterval = <%= @graph_scale %>;
  var timeInterval = 60; // minutes between each element in array

  var graph = d3.select("#graph")
    .attr("width", abswidth)
    .attr("height", absheight)
    .append("g")
      .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

  var format = d3.time.format("%Y-%m-%d %H:%M:%S UTC");
  // e.g. 2015-05-25 16:59:44 UTC
  var maxLen = <%= @max_size %>;
  var startTime = format.parse("<%= @start %>");
  var trueEndTime = format.parse("<%= @end %>");
  startTime = new Date(startTime.getTime() - 60*60000*4);
  trueEndTime = new Date(trueEndTime.getTime() - 60*60000*4);
  var endTime = new Date(startTime.getTime() + timeInterval*60000*maxLen);

  var nil = 0; // appears in company_tweet_array as nil
  var data = <%= raw @company_tweet_array %>;
  var keywordList = <%= raw @company_header_array %>;
  var yMax = d3.max(d3.merge(data));

  var stockData = <%= raw @stock %>;
  console.log(stockData);
  var stockMax = Math.max.apply(Math,stockData.quote.map(function(o){return o.High;}));
    //https://jsfiddle.net/45c5r246/

  // assuming format
  // [[t0_keyword0count,t1_keyword0count,...],
  //  [t0_keyword1count,t1_keyword1count,...],...]

  // extend each incomplete subarray with 0s
  data.forEach(function(current,index) {
    if (maxLen - current.length > 0) {
      var temp = [];
      for (var i = 0; i < maxLen - current.length; i+=1) {
        temp.push(0);
      }
      data[index] = current.concat(temp);
    }
  });
  // extend each element into a 3-element array
  // data[i][j] = (keyword i count at time j)
  // -> [(keyword i count at time j), (keyword i), (time j)]
  data.forEach(function(current,i) {
    data[i] = current.map(function(countij,j) {
      return [countij,
              keywordList[i],
              new Date(startTime.getTime() + timeInterval*60000*j)];
    });
  });

  var xScale = d3.time.scale()
    .range([0, width])
    .domain([startTime, endTime]);
  var yScale = d3.scale.linear()
    .range([height, 0])
    .domain([0, yMax]);
  var stockScale = d3.scale.linear()
    .range([height, 0])
    .domain([0, stockMax]);

  var xAxis = d3.svg.axis()
    .scale(xScale)
    .orient("bottom")
    .ticks(d3.time.minutes, timeInterval);
  var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("left");
  var stockAxis = d3.svg.axis()
    .scale(stockScale)
    .orient("right");

  var xAccessor = function(d) {return xScale(d[2])}; // date
  var yAccessor = function(d) {return yScale(d[0])}; // word count

  var drawLine = d3.svg.line()
    .x(xAccessor)
    .y(yAccessor);
  var tip = d3.tip()
    .attr("class","d3-tip")
    .html(function(d) {
      return "Keyword: " + d[1];
    });
  graph.call(tip);

  // axes
  graph.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)
    .selectAll("text")
      .style("text-anchor","end")
      .attr("dx","-.8em")
      .attr("dy",".15em")
      .style("font-size","10pt")
      .attr("transform",
        function(d) {return "rotate(-75)"});
  graph.append("g")
    .attr("class", "y axis")
    .call(yAxis);
  graph.append("g")
    .attr("class", "stock axis")
    .attr("transform", "translate(" + width + ",0)")
    .call(stockAxis);

  // data lines and tooltips
  data.forEach(function(currentKeyword) {
    graph.append("path")
      .attr("d",drawLine(currentKeyword))
      .attr("stroke","black")
      .attr("stroke-width",3)
      .attr("fill","none")
      .data(currentKeyword)
      .on("mouseover",tip.show)
      .on("mouseout",tip.hide);
  });

  // dots for time, TODO: grid lines?
  var dotTip = d3.tip()
    .attr("class","d3-tip")
    .offset([-10,0])
    .html(function(d) {
      return d[1] + " x " + d[0] + "<br>Date: " + d[2].toString();
    });
  graph.call(dotTip);
  data.forEach(function(currentKeyword) {
    graph.selectAll(".dot")
      .data(currentKeyword)
      .enter().append("circle")
      .attr("class","datapoint")
      .attr("cx",xAccessor)
      .attr("cy",yAccessor)
      .attr("r",3)
      .attr("stroke","red")
      .attr("stroke-width",1)
      .attr("fill","red")
      .on("mouseover",dotTip.show)
      .on("mouseout",dotTip.hide);
  });

  // stock high/low bounding rectangle and tooltips
  /*var xStockAccessor = function(d) {return xScale(d[0])}; // date
  var yStockAccessor = function(d) {return stockScale(d[1])}; // price
  var drawLine2 = d3.svg.line()
    .x(xStockAccessor)
    .y(yStockAccessor);

  var stockRects = [];
  // each element is a 5-element array of 2-element arrays, pts forming a rectangle
  var stockOpenCloseDots = [];
  // each element is a 2-element array, each describing a pt

  stockData.quote.forEach(function(current) {
    var stockHigh = current.High;
    var stockLow = current.Low;
    var stockOpen = current.Open;
    var stockClose = current.Close;
    var openTimeUTC = format.parse(current.Date + " 13:30:00 UTC");
    var closeTimeUTC = format.parse(current.Date + " 20:00:00 UTC");
    
    stockRects.push(rectFrom_SW_NE([openTimeUTC,stockLow],[closeTimeUTC,stockHigh]));
    stockOpenCloseDots.push([openTimeUTC,stockOpen]);
    stockOpenCloseDots.push([closeTimeUTC,stockClose]);
  });

  stockRects.forEach(function(currentRect) {
    graph.append("path")
      .attr("d",drawLine2(currentRect))
      .attr("stroke","blue")
      .attr("stroke-width",3)
      .attr("fill","none");
  });
  stockOpenCloseDots.forEach(function(currentDot) {
    graph.append("circle")
      .attr("cx",xStockAccessor(currentDot))
      .attr("cy",yStockAccessor(currentDot))
      .attr("r",4)
      .attr("stroke","blue")
      .attr("stroke-width",2)
      .attr("fill","white");
  });*/
  
  // date
  graph.append("text")
    .text("Start: ")
    .attr("x","1em")
    .attr("y","-2em");
  graph.append("text")
    .text(startTime)
    .attr("x","4em")
    .attr("y","-2em");
  graph.append("text")
    .text("End:")
    .attr("x","1em")
    .attr("y","-1em");
  graph.append("text")
    .text(trueEndTime)
    .attr("x","4em")
    .attr("y","-1em");
}

// takes sw=[x,y], ne=[x,y]
// returns a cyclic path with those as bottom-left, upper-right vertices
function rectFrom_SW_NE(sw,ne) {
  var nw = [sw[0],ne[1]];
  var se = [ne[0],sw[1]];
  return [sw,nw,ne,se,sw];
}
</script>

<table border="5"> 
<tr>
  <th><%= Time %></th>
  <% @company_header_array.each do |header| %>
    <th><%= header %></th>
  <% end %>   
</tr>

<% for t in 0..@max_size-1 %>
  <tr>
    <td><%= t*15 %></td>
    <% for i in 0..@company_header_array.size-1 %>
      <td><%= @company_tweet_array[i][t] %></td>
    <% end %>
  </tr>
<% end %>
</table>